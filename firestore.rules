rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isModerator() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'moderator'];
    }
    
    function isValidUserData(data) {
      return data.keys().hasAll(['uid', 'email', 'displayName', 'role', 'isActive', 'createdAt', 'updatedAt']) &&
             data.uid is string &&
             data.email is string &&
             data.displayName is string &&
             data.role in ['admin', 'moderator', 'user'] &&
             data.isActive is bool &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp;
    }
    
    function isValidUserUpdate(data) {
      // Fields that can be updated by user
      let allowedFields = ['displayName', 'firstName', 'lastName', 'bio', 'favoriteComparsa', 'favoriteAgrupacion', 'preferences', 'photoURL', 'updatedAt', 'lastLoginAt', 'isNewUser', 'interactions'];
      
      // Check if only allowed fields are being updated
      return data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
    }
    
    function isValidPreferences(preferences) {
      // More flexible preferences validation
      return preferences is map &&
             (!preferences.keys().hasAny(['theme']) || preferences.theme in ['light', 'dark', 'system']) &&
             (!preferences.keys().hasAny(['language']) || preferences.language in ['es', 'en']) &&
             (!preferences.keys().hasAny(['notifications']) || preferences.notifications is map) &&
             (!preferences.keys().hasAny(['privacy']) || preferences.privacy is map);
    }

    // Users collection
    match /users/{userId} {
      // Read: User can read their own profile, admins can read all users, authenticated users can read all for directory
      allow read: if isOwner(userId) ||
                     isAdmin() ||
                     isAuthenticated();
      
      // Create: Any authenticated user can create their profile
      allow create: if isAuthenticated() &&
                       isOwner(userId) &&
                       isValidUserData(request.resource.data) &&
                       request.resource.data.uid == userId &&
                       request.resource.data.email == request.auth.token.email &&
                       request.resource.data.role == 'user' &&
                       request.resource.data.isActive == true;
      
      // Update: Authenticated users can update their own profile with restrictions
      allow update: if isAuthenticated() &&
                       isOwner(userId) &&
                       isValidUserUpdate(request.resource.data) &&
                       // User cannot change their own role or active status (if they exist)
                       (!('role' in request.resource.data) || request.resource.data.role == resource.data.role) &&
                       (!('isActive' in request.resource.data) || request.resource.data.isActive == resource.data.isActive) &&
                       // Validate preferences structure if being updated
                       (!request.resource.data.keys().hasAny(['preferences']) ||
                        isValidPreferences(request.resource.data.preferences));
      
      // Special rule for interaction count updates - only allow interactions and updatedAt fields
      allow update: if isAuthenticated() &&
                       isOwner(userId) &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['interactions', 'updatedAt']) &&
                       // Ensure core fields remain unchanged (if they exist in the update)
                       (!('role' in request.resource.data) || request.resource.data.role == resource.data.role) &&
                       (!('isActive' in request.resource.data) || request.resource.data.isActive == resource.data.isActive) &&
                       (!('email' in request.resource.data) || request.resource.data.email == resource.data.email) &&
                       (!('uid' in request.resource.data) || request.resource.data.uid == resource.data.uid);
      
      // More permissive rule for basic profile updates
      allow update: if isAuthenticated() &&
                       isOwner(userId) &&
                       // Only allow safe profile fields to be updated
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                         'displayName', 'firstName', 'lastName', 'bio',
                         'favoriteComparsa', 'favoriteAgrupacion', 'preferences',
                         'photoURL', 'updatedAt', 'lastLoginAt', 'isNewUser'
                       ]);
      
      // Admin updates: Admins can update any user (including role and active status)
      allow update: if isAdmin() && 
                       isValidUserData(request.resource.data);
      
      // Delete: Only admins can delete users
      allow delete: if isAdmin();
      
      // Subcollections for user-specific data
      match /private/{document} {
        // Private subcollection: only the user can access
        allow read, write: if isOwner(userId);
      }
      
      match /notifications/{notificationId} {
        // User notifications: only the user can read/write
        allow read, write: if isOwner(userId);
      }
    }
    
    // Admin collection - only admins can access
    match /admin/{document} {
      allow read, write: if isAdmin();
    }
    
    // System settings - only admins can write, authenticated users can read
    match /settings/{document} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Public content collections
    match /facts/{factId} {
      // Facts: public read access, moderators can write
      allow read: if true;
      allow write: if isModerator();
    }
    
    match /funfacts/{factId} {
      // Fun facts: public read access, moderators can write, whitelisted users can vote
      allow read: if true;
      allow write: if isModerator();
      allow update: if isAuthenticated() &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['votes']);
    }
    
    match /news/{newsId} {
      // News: authenticated users can read, moderators can write
      allow read: if isAuthenticated();
      allow write: if isModerator();
    }
    
    match /playlists/{playlistId} {
      // Playlists: authenticated users can read, moderators can write
      allow read: if isAuthenticated();
      allow write: if isModerator();
    }
    
    match /photos/{photoId} {
      // Photos: authenticated users can read, moderators can write
      allow read: if isAuthenticated();
      allow write: if isModerator();
    }
    
    // User-generated content with ownership
    match /posts/{postId} {
      // Posts: authenticated users can read, users can create their own, owners can update/delete
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
                       request.resource.data.authorId == request.auth.uid &&
                       request.resource.data.type in ['text', 'image', 'mixed'] &&
                       request.resource.data.privacy in ['public', 'friends', 'comparsa', 'agrupacion'];
      allow update: if isAuthenticated() &&
                       resource.data.authorId == request.auth.uid &&
                       // Allow updating content, privacy, tags, location, but not authorId or type
                       request.resource.data.authorId == resource.data.authorId &&
                       request.resource.data.type == resource.data.type;
      allow delete: if isAuthenticated() &&
                       (resource.data.authorId == request.auth.uid || isModerator());
    }
    
    match /comments/{commentId} {
      // Comments: authenticated users can read, users can create their own, owners can update/delete
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                       request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
                              (resource.data.authorId == request.auth.uid || isModerator());
    }
    
    // Analytics and logs - only admins can access
    match /analytics/{document} {
      allow read, write: if isAdmin();
    }
    
    match /logs/{document} {
      // Admins can read and write all logs
      allow read, write: if isAdmin();
      // Authenticated users can create their own activity logs
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
    }

    // User votes collection
    match /userVotes/{voteId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }

    // User interactions collections
    match /userLikes/{likeId} {
      // Users can read their own likes and likes they've given/received
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.fromUserId ||
                      request.auth.uid == resource.data.toUserId);
      // Allow list operations for authenticated users with proper filtering
      allow list: if isAuthenticated();
      // Users can create likes from themselves to others
      allow create: if isAuthenticated() &&
                       request.auth.uid == request.resource.data.fromUserId &&
                       request.resource.data.fromUserId != request.resource.data.toUserId;
      // Users can delete their own likes
      allow delete: if isAuthenticated() &&
                       request.auth.uid == resource.data.fromUserId;
    }

    match /friendRequests/{requestId} {
      // Users can read requests they sent or received
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.fromUserId ||
                      request.auth.uid == resource.data.toUserId);
      // Allow list operations for authenticated users
      allow list: if isAuthenticated();
      // Users can create friend requests from themselves to others
      allow create: if isAuthenticated() &&
                       request.auth.uid == request.resource.data.fromUserId &&
                       request.resource.data.fromUserId != request.resource.data.toUserId &&
                       request.resource.data.status == 'pending';
      // Users can update requests they received (to accept/decline)
      allow update: if isAuthenticated() &&
                       request.auth.uid == resource.data.toUserId &&
                       request.resource.data.status in ['accepted', 'declined'] &&
                       resource.data.status == 'pending';
      // Users can delete their own sent requests
      allow delete: if isAuthenticated() &&
                       request.auth.uid == resource.data.fromUserId;
    }

    match /friendships/{friendshipId} {
      // Users can read friendships they're part of
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.user1Id ||
                      request.auth.uid == resource.data.user2Id);
      // Allow list operations for authenticated users
      allow list: if isAuthenticated();
      // System can create friendships (through friend request acceptance)
      allow create: if isAuthenticated();
      // Users can delete friendships they're part of (to unfriend)
      allow delete: if isAuthenticated() &&
                       (request.auth.uid == resource.data.user1Id ||
                        request.auth.uid == resource.data.user2Id);
    }

    match /userFollows/{followId} {
      // Users can read follows they're involved in
      allow read: if isAuthenticated() &&
                     (request.auth.uid == resource.data.followerId ||
                      request.auth.uid == resource.data.followingId);
      // Users can create follows from themselves to others
      allow create: if isAuthenticated() &&
                       request.auth.uid == request.resource.data.followerId &&
                       request.resource.data.followerId != request.resource.data.followingId;
      // Users can delete their own follows
      allow delete: if isAuthenticated() &&
                       request.auth.uid == resource.data.followerId;
    }

    // Post interactions
    match /postLikes/{likeId} {
      // Users can read likes on posts they can see, create their own likes, delete their own likes
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
                       request.auth.uid == request.resource.data.userId &&
                       request.resource.data.type == 'like';
      allow delete: if isAuthenticated() &&
                       request.auth.uid == resource.data.userId;
    }

    match /postComments/{commentId} {
      // Users can read comments on posts they can see, create their own comments, update/delete their own
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
                       request.auth.uid == request.resource.data.authorId;
      allow update: if isAuthenticated() &&
                       request.auth.uid == resource.data.authorId;
      allow delete: if isAuthenticated() &&
                       (request.auth.uid == resource.data.authorId || isModerator());
    }

    match /postShares/{shareId} {
      // Users can read shares, create their own shares, delete their own shares
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
                       request.auth.uid == request.resource.data.userId;
      allow delete: if isAuthenticated() &&
                       request.auth.uid == resource.data.userId;
    }
    
    // Fallback rule - deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}